// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/Photo.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8452154140893309457),
      name: 'Photo',
      lastPropertyId: const IdUid(9, 3168296054505618822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 989340443064075646),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3203715375406232874),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6720509377879332907),
            name: 'labels',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5711374106246872086),
            name: 'createDateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4721466364384475782),
            name: 'width',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1092866033635600321),
            name: 'height',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5826839999700844135),
            name: 'entity_id',
            type: 6,
            flags: 8,
            indexId: const IdUid(1, 7713753588704185151)),
        ModelProperty(
            id: const IdUid(8, 4775042554793791797),
            name: 'is_cloud',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3168296054505618822),
            name: 'is_favorite',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8452154140893309457),
      lastIndexId: const IdUid(1, 7713753588704185151),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Photo: EntityDefinition<Photo>(
        model: _entities[0],
        toOneRelations: (Photo object) => [],
        toManyRelations: (Photo object) => {},
        getId: (Photo object) => object.id,
        setId: (Photo object, int id) {
          object.id = id;
        },
        objectToFB: (Photo object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final labelsOffset = fbb.writeList(
              object.labels.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pathOffset);
          fbb.addOffset(2, labelsOffset);
          fbb.addInt64(3, object.createDateTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.width);
          fbb.addInt64(5, object.height);
          fbb.addInt64(6, object.entity_id);
          fbb.addBool(7, object.is_cloud);
          fbb.addBool(8, object.is_favorite);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Photo(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..is_cloud =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..is_favorite =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Photo] entity fields to define ObjectBox queries.
class Photo_ {
  /// see [Photo.id]
  static final id = QueryIntegerProperty<Photo>(_entities[0].properties[0]);

  /// see [Photo.path]
  static final path = QueryStringProperty<Photo>(_entities[0].properties[1]);

  /// see [Photo.labels]
  static final labels =
      QueryStringVectorProperty<Photo>(_entities[0].properties[2]);

  /// see [Photo.createDateTime]
  static final createDateTime =
      QueryIntegerProperty<Photo>(_entities[0].properties[3]);

  /// see [Photo.width]
  static final width = QueryIntegerProperty<Photo>(_entities[0].properties[4]);

  /// see [Photo.height]
  static final height = QueryIntegerProperty<Photo>(_entities[0].properties[5]);

  /// see [Photo.entity_id]
  static final entity_id =
      QueryIntegerProperty<Photo>(_entities[0].properties[6]);

  /// see [Photo.is_cloud]
  static final is_cloud =
      QueryBooleanProperty<Photo>(_entities[0].properties[7]);

  /// see [Photo.is_favorite]
  static final is_favorite =
      QueryBooleanProperty<Photo>(_entities[0].properties[8]);
}
